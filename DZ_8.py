# Урок 8. Сериализация
# Напишите функцию, которая сереализует содержимое
# текущей директории в json-файл. В файле должен
# храниться список словарей, словарь описывает
# элемент внутри директории: имя, расширение, тип.
# Если элемент - директория, то только тип и имя.
# Пример результата для папки, где лежит файл test.txt и директория directory_test:
# [
# {
# 'name': 'test',
# 'extension': '.txt',
# 'type': 'file'
# },
# {
# 'name': 'directory_test',
# 'type': 'directory',
# }
# ]

import os
import json



def json_serealis(directory):
    dirList = os.listdir("./")
    print(dirList)
    list_file = []
    list_dir = []
    for dir in dirList:
        if os.path.isdir(dir) == True:
            list_dir.append(dir)
        else:
            list_file.append(dir)

    list_res = []
    for note in list_file:
        name, mult = note.split('.')
        list_res.append({'name': name, 'extension': mult, 'type': 'file'})

    for note in list_dir:
        list_res.append({'name': note, 'type': 'directory' })

    with open('res.lson' , 'w') as r:
        json.dump(list_res, r, indent=2)


directory = (r'C:\Users\lenovo\PycharmProjects\pythonProject8')

json_serealis(directory)










# Дополнительно:
# Напишите функцию, которая получает на вход директорию и рекурсивно обходит её и все вложенные директории. Результаты обхода сохраните в файлы json, csv и pickle.
# - Для дочерних объектов указывайте родительскую директорию.
# - Для каждого объекта укажите файл это или директория.
# - Для файлов сохраните его размер в байтах, а для директорий размер файлов в ней с учётом всех вложенных файлов и директорий.
# Дополнительно делать ?
# Урок 9. Декораторы
# Основное:
# Создать декоратор для использования кэша. Т.е. сохранять аргументы и результаты в словарь, если вызывается функция с агрументами, которые уже записаны в кэше - вернуть результат из кэша, если нет - выполнить функцию. Кэш лучше хранить в json.
# Решение, близкое к решению данной задачи было разобрано на семинаре.
#
# Дополнительное: Напишите следующие функции:
# - Нахождение корней квадратного уравнения
# - Генерация csv файла с тремя случайными числами в каждой строке. 100-1000 строк.
# - Декоратор, запускающий функцию нахождения корней квадратного уравнения с каждой тройкой чисел из csv файла.
# - Декоратор, сохраняющий переданные параметры и результаты работы функции в json файл.